{"ast":null,"code":"var _jsxFileName = \"C:\\\\Licenta\\\\edu-digital_frontend\\\\src\\\\components\\\\CreatePostComp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreatePostComp() {\n  _s();\n  const {\n    token\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n\n  // dacă nu ești logat, redirect la login\n  useEffect(() => {\n    if (!token) navigate(\"/login\");\n  }, [token, navigate]);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [files, setFiles] = useState([]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"description\", description);\n    files.forEach(file => formData.append(\"files\", file));\n    try {\n      const res = await fetch(\"http://localhost:8080/posts/create\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        body: formData\n      });\n      if (res.ok) {\n        const createdPost = await res.json();\n        navigate(`/posts/${createdPost.id}`);\n      } else {\n        const err = await res.text();\n        alert(\"Eroare la creare postare: \" + err);\n      }\n    } catch (err) {\n      console.error(err);\n      alert(\"Eroare de rețea.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-post-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Creeaz\\u0103 o nou\\u0103 postare\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"create-post-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Titlu:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Descriere:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: description,\n          onChange: e => setDescription(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Imagini/Vid:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          multiple: true,\n          onChange: e => setFiles(Array.from(e.target.files))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Trimite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(CreatePostComp, \"IBLR/MmcyFveAuASKS0a9CX3x58=\", false, function () {\n  return [useNavigate];\n});\n_c = CreatePostComp;\nvar _c;\n$RefreshReg$(_c, \"CreatePostComp\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useNavigate","AuthContext","jsxDEV","_jsxDEV","CreatePostComp","_s","token","navigate","title","setTitle","description","setDescription","files","setFiles","handleSubmit","e","preventDefault","formData","FormData","append","forEach","file","res","fetch","method","headers","Authorization","body","ok","createdPost","json","id","err","text","alert","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","multiple","Array","from","_c","$RefreshReg$"],"sources":["C:/Licenta/edu-digital_frontend/src/components/CreatePostComp.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nexport default function CreatePostComp() {\r\n  const {  token } = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n\r\n  // dacă nu ești logat, redirect la login\r\n  useEffect(() => {\r\n    if (!token) navigate(\"/login\");\r\n  }, [token, navigate]);\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [files, setFiles] = useState([]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"title\", title);\r\n    formData.append(\"description\", description);\r\n    files.forEach((file) => formData.append(\"files\", file));\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:8080/posts/create\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      if (res.ok) {\r\n        const createdPost = await res.json();\r\n        navigate(`/posts/${createdPost.id}`);\r\n      } else {\r\n        const err = await res.text();\r\n        alert(\"Eroare la creare postare: \" + err);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Eroare de rețea.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-post-container\">\r\n      <h2>Creează o nouă postare</h2>\r\n      <form onSubmit={handleSubmit} className=\"create-post-form\">\r\n        <label>\r\n          Titlu:\r\n          <input\r\n            type=\"text\"\r\n            value={title}\r\n            onChange={e => setTitle(e.target.value)}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Descriere:\r\n          <textarea\r\n            value={description}\r\n            onChange={e => setDescription(e.target.value)}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Imagini/Vid:\r\n          <input\r\n            type=\"file\"\r\n            multiple\r\n            onChange={e => setFiles(Array.from(e.target.files))}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Trimite</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}